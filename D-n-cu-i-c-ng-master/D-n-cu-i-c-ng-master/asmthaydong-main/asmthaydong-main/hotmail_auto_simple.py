from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
import time
import random
import string
import datetime
import os

class HotmailAutoCreator:
    def __init__(self, fast: bool = False):
        self.driver = None
        self.wait = None
        self.fast = fast
    
    def setup_driver(self):
        """C√†i ƒë·∫∑t Chrome driver t·ª± ƒë·ªông"""
        print("üöÄ ƒêang kh·ªüi ƒë·ªông Chrome...")
        try:
            # T·∫Øt log c·ªßa webdriver_manager
            os.environ['WDM_LOG'] = '0'
            
            service = Service(ChromeDriverManager().install())
            
            options = webdriver.ChromeOptions()
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_argument('--disable-extensions')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--start-maximized')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            # T·ªëi ∆∞u t·ªëc ƒë·ªô khi fast mode
            if self.fast:
                prefs = {
                    'profile.managed_default_content_settings.images': 2,
                    'profile.default_content_setting_values.notifications': 2,
                }
                options.add_experimental_option('prefs', prefs)
                options.set_capability('pageLoadStrategy', 'eager')
            
            self.driver = webdriver.Chrome(service=service, options=options)
            self.wait = WebDriverWait(self.driver, 12 if self.fast else 15)
            
            # ·∫®n automation
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            print("‚úÖ Chrome ƒë√£ s·∫µn s√†ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi ƒë·ªông Chrome: {e}")
            return False

    def generate_username(self):
        """T·∫°o username ng·∫´u nhi√™n"""
        adjectives = ['happy', 'smart', 'cool', 'fast', 'quick', 'sunny', 'lucky', 'brave', 'calm', 'proud']
        nouns = ['tiger', 'eagle', 'dragon', 'wolf', 'lion', 'fox', 'bear', 'hawk', 'shark', 'panda']
        numbers = ''.join(random.choices(string.digits, k=4))
        
        username = f"{random.choice(adjectives)}{random.choice(nouns)}{numbers}"
        return username.lower()

    def generate_password(self):
        """T·∫°o password m·∫°nh"""
        uppercase = string.ascii_uppercase
        lowercase = string.ascii_lowercase
        digits = string.digits
        symbols = "!@#$%"
        
        password = [
            random.choice(uppercase),
            random.choice(lowercase), 
            random.choice(digits),
            random.choice(symbols)
        ]
        
        all_chars = uppercase + lowercase + digits + symbols
        password += random.choices(all_chars, k=8)
        random.shuffle(password)
        return ''.join(password)

    def generate_birthdate(self):
        """T·∫°o ng√†y sinh h·ª£p l·ªá (tr√™n 18 tu·ªïi)"""
        current_year = datetime.datetime.now().year
        year = random.randint(current_year - 50, current_year - 18)
        month = random.randint(1, 12)
        day = random.randint(1, 28)
        return day, month, year

    def random_delay(self, min_time=1, max_time=3):
        """T·∫°o ƒë·ªô tr·ªÖ ng·∫´u nhi√™n gi·ªØa c√°c action"""
        scale = 0.3 if self.fast else 1.0
        delay = random.uniform(min_time, max_time) * scale
        time.sleep(delay)

    def wait_and_click(self, by, value, description=""):
        """Ch·ªù element v√† click"""
        try:
            if description:
                print(f"üëâ ƒêang click: {description}")
            element = self.wait.until(EC.element_to_be_clickable((by, value)))
            try:
                element.click()
            except Exception:
                try:
                    # Scroll v√†o gi·ªØa m√†n h√¨nh r·ªìi click l·∫°i
                    self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", element)
                    time.sleep(0.3)
                    element.click()
                except Exception:
                    try:
                        # D√πng ActionChains
                        ActionChains(self.driver).move_to_element(element).pause(0.1).click().perform()
                    except Exception:
                        # Fallback JS click
                        self.driver.execute_script("arguments[0].click();", element)
            self.random_delay(1, 2)
            return True
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ click {description}: {e}")
            return False

    def wait_and_send_keys(self, by, value, keys, description=""):
        """Ch·ªù element v√† g√µ text"""
        try:
            if description:
                print(f"üìù ƒêang ƒëi·ªÅn: {description}")
            element = self.wait.until(EC.presence_of_element_located((by, value)))
            try:
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", element)
            except Exception:
                pass
            try:
                element.clear()
            except Exception:
                pass
            # C·ªë g√µ b√¨nh th∆∞·ªùng
            try:
                element.send_keys(keys)
            except Exception:
                pass
            # N·∫øu ch∆∞a c√≥ gi√° tr·ªã, th·ª≠ ActionChains
            try:
                val = element.get_attribute("value") or ""
            except Exception:
                val = ""
            if not val:
                try:
                    ActionChains(self.driver).move_to_element(element).click().pause(0.1).send_keys(keys).perform()
                except Exception:
                    pass
            # N·∫øu v·∫´n tr·ªëng, fallback JS + events
            try:
                val = element.get_attribute("value") or ""
            except Exception:
                val = ""
            if not val:
                try:
                    self.driver.execute_script(
                        "var el=arguments[0],v=arguments[1]; el.value=v; el.dispatchEvent(new Event('input',{bubbles:true})); el.dispatchEvent(new Event('change',{bubbles:true}));",
                        element,
                        keys,
                    )
                except Exception:
                    pass
            self.random_delay(1, 2)
            return True
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn {description}: {e}")
            return False

    def is_present(self, by, value, timeout=3):
        """Ki·ªÉm tra nhanh ph·∫ßn t·ª≠ c√≥ xu·∫•t hi·ªán (kh√¥ng c·∫ßn clickable)"""
        try:
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, value))
            )
            return True
        except Exception:
            return False

    def send_keys_any(self, candidates, keys, description=""):
        """Th·ª≠ ƒëi·ªÅn text theo nhi·ªÅu selector cho c√πng m·ªôt field"""
        for by, value in candidates:
            if self.wait_and_send_keys(by, value, keys, description):
                return True
        return False

    def find_any(self, candidates, timeout=6):
        """T√¨m element theo danh s√°ch selector, tr·∫£ v·ªÅ element ƒë·∫ßu ti√™n t√¨m th·∫•y"""
        last_err = None
        for by, value in candidates:
            try:
                el = WebDriverWait(self.driver, timeout).until(
                    EC.presence_of_element_located((by, value))
                )
                return el
            except Exception as e:
                last_err = e
                continue
        if last_err:
            raise last_err
        return None

    def wait_for_any(self, candidates, timeout=10):
        """ƒê·ª£i cho ƒë·∫øn khi 1 trong c√°c selector xu·∫•t hi·ªán, tr·∫£ v·ªÅ True n·∫øu th·∫•y"""
        end = time.time() + timeout
        while time.time() < end:
            for by, value in candidates:
                try:
                    if self.driver.find_elements(by, value):
                        return True
                except Exception:
                    continue
            time.sleep(0.2)
        return False

    def select_country_and_birthdate(self):
        """Ch·ªçn khu v·ª±c (Country) v√† ƒëi·ªÅn th√¥ng tin ng√†y sinh t·ª´ combobox (Th√°ng, Ng√†y) v√† input (NƒÉm)"""
        try:
            print("6. ƒêang ƒëi·ªÅn th√¥ng tin b·ªï sung (khu v·ª±c v√† ng√†y sinh)...")

            # ƒê·ª£i form xu·∫•t hi·ªán
            try:
                self.wait.until(EC.presence_of_element_located(
                    (By.XPATH, "//*[@name='Country' or @name='BirthDay' or @name='BirthMonth' or @name='BirthYear']")))
            except Exception:
                pass

            # T·∫°o d·ªØ li·ªáu ng√†y sinh
            day, month, year = self.generate_birthdate()

            # Ch·ªçn khu v·ª±c (Country)
            try:
                country_el = None
                for by, val in [
                    (By.NAME, "Country"),
                    (By.CSS_SELECTOR, "select[name='Country']"),
                ]:
                    els = self.driver.find_elements(by, val)
                    if els:
                        country_el = els[0]
                        break
                if country_el:
                    self.driver.execute_script(
                        "arguments[0].value='VN'; arguments[0].dispatchEvent(new Event('change',{bubbles:true}));", country_el)
                    # N·∫øu value ch∆∞a ƒë√∫ng, ch·ªçn theo text
                    if country_el.get_attribute('value') not in ['VN', 'Vietnam', 'Viet Nam']:
                        try:
                            Select(country_el).select_by_visible_text("Vietnam")
                        except Exception:
                            pass
            except Exception:
                pass

            self.random_delay(0.3, 0.6)

            # S·ª≠ d·ª•ng combobox cho Th√°ng v√† Ng√†y:
            if self.driver.find_elements(By.XPATH, "//*[@role='combobox' and contains(translate(@aria-label, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'month')]") \
               and self.driver.find_elements(By.XPATH, "//*[@role='combobox' and contains(translate(@aria-label, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'day')]"):
                
                print("[DATE] Ch·ªçn Th√°ng v√† Ng√†y qua combobox (ch·ªçn ng·∫´u nhi√™n)")
                if not self.auto_select_combobox_click_option("month"):
                    print("[WARNING] Ch·ªçn Th√°ng th·∫•t b·∫°i, ƒëang ƒëi·ªÅn b·∫±ng input")
                    self.wait_and_send_keys(By.NAME, "BirthMonth", str(month), "BirthMonth")
                if not self.auto_select_combobox_click_option("day"):
                    print("[WARNING] Ch·ªçn Ng√†y th·∫•t b·∫°i, ƒëang ƒëi·ªÅn b·∫±ng input")
                    self.wait_and_send_keys(By.NAME, "BirthDay", str(day), "BirthDay")
            else:
                # N·∫øu kh√¥ng c√≥ combobox, s·ª≠ d·ª•ng input
                self.wait_and_send_keys(By.NAME, "BirthDay", str(day), "BirthDay")
                try:
                    msel = self.driver.find_element(By.NAME, "BirthMonth")
                    try:
                        Select(msel).select_by_value(str(month))
                    except Exception:
                        self.driver.execute_script("arguments[0].value=arguments[1]; arguments[0].dispatchEvent(new Event('change',{bubbles:true}));", msel, str(month))
                except Exception:
                    self.wait_and_send_keys(By.NAME, "BirthMonth", str(month), "BirthMonth")
            
            # ƒêi·ªÅn NƒÉm (BirthYear) qua input n·∫øu kh√¥ng d√πng combobox
            self.wait_and_send_keys(By.NAME, "BirthYear", str(year), "BirthYear")
            self.random_delay(0.5, 1)
            
            # Click Next sau khi ƒëi·ªÅn xong th√¥ng tin
            if self.is_present(By.ID, "iSignupAction", timeout=2):
                self.wait_and_click(By.ID, "iSignupAction", "Next sau Birthdate")
                self.random_delay(1, 2)
            
            print("‚úÖ ƒê√£ ƒëi·ªÅn xong th√¥ng tin b·ªï sung")
            return True

        except Exception as e:
            print(f"‚ùå L·ªói ƒëi·ªÅn th√¥ng tin b·ªï sung: {e}")
            return False

    def dismiss_overlays_and_cookies(self):
        """ƒê√≥ng popup cookie/overlay n·∫øu c√≥, ƒë·ªÉ tr√°nh che n√∫t 'T·∫°o email m·ªõi'"""
        try:
            # M·ªôt s·ªë trang c√≥ banner cookie/consent c·ªßa Microsoft
            selectors = [
                (By.ID, "accept"),
                (By.ID, "idBtn_Accept"),
                (By.ID, "acceptButton"),
                (By.XPATH, "//button[contains(., 'Accept') or contains(., 'I agree') or contains(., 'ƒê·ªìng √Ω')]"),
            ]
            for by, value in selectors:
                try:
                    btn = WebDriverWait(self.driver, 3).until(
                        EC.element_to_be_clickable((by, value))
                    )
                    self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn)
                    time.sleep(0.2)
                    try:
                        btn.click()
                    except Exception:
                        self.driver.execute_script("arguments[0].click();", btn)
                    self.random_delay(0.5, 1)
                    break
                except Exception:
                    continue
        except Exception:
            pass

    def click_any(self, candidates, description=""):
        """Th·ª≠ click theo nhi·ªÅu selector cho c√πng m·ªôt h√†nh ƒë·ªông"""
        for by, value in candidates:
            if self.wait_and_click(by, value, description):
                return True
        return False

    def press_enter_on(self, candidates, description=""):
        """Th·ª≠ focus v√† nh·∫•n Enter tr√™n m·ªôt input/button"""
        for by, value in candidates:
            try:
                el = self.wait.until(EC.presence_of_element_located((by, value)))
                try:
                    self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
                except Exception:
                    pass
                try:
                    el.click()
                except Exception:
                    pass
                try:
                    el.send_keys(Keys.RETURN)
                    self.random_delay(1, 2)
                    return True
                except Exception:
                    continue
            except Exception:
                continue
        return False

    def submit_parent_form(self, candidates):
        """T√¨m ph·∫ßn t·ª≠ v√† submit form cha b·∫±ng JS"""
        for by, value in candidates:
            try:
                el = self.wait.until(EC.presence_of_element_located((by, value)))
                self.driver.execute_script(
                    "var el=arguments[0]; while(el && el.tagName!=='FORM'){el=el.parentElement;} if(el){el.submit();}",
                    el,
                )
                self.random_delay(1, 2)
                return True
            except Exception:
                continue
        return False

    def fill_password_fast_and_next(self, password):
        """ƒêi·ªÅn password c·ª±c nhanh v√† chuy·ªÉn sang form k·∫ø ti·∫øp (t√™n ho·∫∑c ng√†y sinh)"""
        password_candidates = [
            (By.ID, "PasswordInput"),
            (By.NAME, "passwd"),
            (By.NAME, "Password"),
            (By.CSS_SELECTOR, "input[type='password']"),
        ]

        # T√¨m v√† focus
        el = self.find_any(password_candidates, timeout=8)
        try:
            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
        except Exception:
            pass
        try:
            el.click()
        except Exception:
            pass

        # Xo√° n·ªôi dung hi·ªán c√≥
        try:
            el.clear()
        except Exception:
            pass
        try:
            ActionChains(self.driver).move_to_element(el).click().key_down(Keys.CONTROL).send_keys('a').key_up(Keys.CONTROL).send_keys(Keys.BACKSPACE).perform()
        except Exception:
            pass

        # G√µ th∆∞·ªùng
        try:
            el.send_keys(password)
        except Exception:
            pass

        # N·∫øu v·∫´n tr·ªëng, g√µ qua ActionChains
        try:
            if not (el.get_attribute('value') or ''):
                ActionChains(self.driver).move_to_element(el).click().pause(0.05).send_keys(password).perform()
        except Exception:
            pass

        # N·∫øu v·∫´n tr·ªëng, set b·∫±ng JS + events
        try:
            if not (el.get_attribute('value') or ''):
                self.driver.execute_script(
                    "var e=arguments[0],v=arguments[1]; e.value=v; e.dispatchEvent(new Event('input',{bubbles:true})); e.dispatchEvent(new Event('change',{bubbles:true}));",
                    el,
                    password,
                )
        except Exception:
            pass

        # B·∫•m Next/Enter
        next_candidates = [
            (By.ID, "iSignupAction"),
            (By.CSS_SELECTOR, "#iSignupAction"),
            (By.XPATH, "//input[@type='submit' and (contains(@value,'Next') or contains(@value,'Ti·∫øp'))]"),
            (By.XPATH, "//button[contains(., 'Next') or contains(., 'Ti·∫øp')]")
        ]
        if not self.click_any(next_candidates, "Next sau Password (fast)"):
            try:
                el.send_keys(Keys.RETURN)
            except Exception:
                pass
            if not self.click_any(next_candidates, "Next sau Password (retry)"):
                self.submit_parent_form([(By.ID, "PasswordInput")])

        # ƒê·ª£i m√†n ti·∫øp theo (t√™n ho·∫∑c birth)
        if not self.wait_for_any([(By.NAME, "FirstName"), (By.NAME, "BirthDay"), (By.NAME, "BirthMonth"), (By.NAME, "BirthYear")], timeout=10):
            # click l·∫°i m·ªôt l·∫ßn
            self.click_any(next_candidates, "Next confirm")
            if not self.wait_for_any([(By.NAME, "FirstName"), (By.NAME, "BirthDay"), (By.NAME, "BirthMonth"), (By.NAME, "BirthYear")], timeout=8):
                raise Exception("Kh√¥ng th·ªÉ chuy·ªÉn sang m√†n h√¨nh ti·∫øp theo sau Password")
        return True

    def solve_captcha_manually(self):
        """Ch·ªù ng∆∞·ªùi d√πng gi·∫£i CAPTCHA th·ªß c√¥ng"""
        print("\n" + "üõë" * 20)
        print("üõë C·∫¶N GI·∫¢I CAPTCHA TH·ª¶ C√îNG!")
        print("üëâ Vui l√≤ng gi·∫£i CAPTCHA trong tr√¨nh duy·ªát...")
        print("üëâ SAU KHI GI·∫¢I XONG, NH·∫§N ENTER TRONG CONSOLE N√ÄY")
        print("üõë" * 20)
        
        input("‚è∏Ô∏è Nh·∫•n Enter sau khi gi·∫£i CAPTCHA xong...")
        return True

    def complete_verification(self):
        """Ho√†n th√†nh x√°c minh sau CAPTCHA"""
        try:
            print("8. ƒêang ho√†n t·∫•t ƒëƒÉng k√Ω...")
            
            # Ch·ªù v√† click n√∫t Next/Submit cu·ªëi c√πng
            submit_btn = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//input[@type='submit' or contains(@value, 'Next')]"))
            )
            submit_btn.click()
            self.random_delay(5, 8)
            
            # Ki·ªÉm tra c√°c trang x√°c minh ti·∫øp theo
            for i in range(3):
                try:
                    # Ki·ªÉm tra n·∫øu c√≥ trang ti·∫øp theo
                    next_btn = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@type='submit' or contains(@value, 'Next')]"))
                    )
                    next_btn.click()
                    self.random_delay(3, 5)
                    print(f"‚úÖ ƒê√£ qua b∆∞·ªõc x√°c minh {i+1}")
                except:
                    break
            
            # Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
            time.sleep(5)
            current_url = self.driver.current_url
            
            if "account.live.com" in current_url or "outlook.live.com" in current_url or "mail.live.com" in current_url:
                print("üéâ ƒêƒÇNG K√ù TH√ÄNH C√îNG!")
                return True
            else:
                print("‚ö†Ô∏è C·∫ßn ki·ªÉm tra th·ªß c√¥ng...")
                # V·∫´n tr·∫£ v·ªÅ True v√¨ c√≥ th·ªÉ ƒë√£ th√†nh c√¥ng
                return True
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói trong qu√° tr√¨nh ho√†n t·∫•t: {e}")
            # V·∫´n ti·∫øp t·ª•c v√¨ c√≥ th·ªÉ ƒë√£ th√†nh c√¥ng
            return True

    def verify_and_login(self, email, password):
        """X√°c minh ƒëƒÉng nh·∫≠p th√†nh c√¥ng"""
        try:
            print("9. ƒêang x√°c minh ƒëƒÉng nh·∫≠p...")
            
            # Truy c·∫≠p tr·ª±c ti·∫øp ƒë·∫øn Outlook
            self.driver.get("https://outlook.live.com/mail/")
            self.random_delay(5, 7)
            
            # Ki·ªÉm tra xem ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
            current_url = self.driver.current_url
            page_source = self.driver.page_source
            
            if "inbox" in current_url.lower() or "mail" in current_url.lower():
                print("‚úÖ ƒê√£ t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p th√†nh c√¥ng!")
                return True
                
            # N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, th·ª≠ ƒëƒÉng nh·∫≠p th·ªß c√¥ng
            print("üîÑ Th·ª≠ ƒëƒÉng nh·∫≠p th·ªß c√¥ng...")
            
            # T√¨m field email v√† ƒëi·ªÅn
            email_field = self.wait.until(
                EC.presence_of_element_located((By.NAME, "loginfmt"))
            )
            email_field.clear()
            email_field.send_keys(email)
            self.random_delay(1, 2)
            
            # Click Next
            next_btn = self.driver.find_element(By.ID, "idSIButton9")
            next_btn.click()
            self.random_delay(3, 5)
            
            # ƒêi·ªÅn password
            password_field = self.wait.until(
                EC.presence_of_element_located((By.NAME, "passwd"))
            )
            password_field.clear()
            password_field.send_keys(password)
            self.random_delay(1, 2)
            
            # Click Sign in
            signin_btn = self.driver.find_element(By.ID, "idSIButton9")
            signin_btn.click()
            self.random_delay(5, 7)
            
            # Ki·ªÉm tra k·∫øt qu·∫£ ƒëƒÉng nh·∫≠p
            time.sleep(5)
            if "inbox" in self.driver.current_url.lower() or "mail" in self.driver.current_url.lower():
                print("‚úÖ ƒêƒÉng nh·∫≠p th·ªß c√¥ng th√†nh c√¥ng!")
                return True
            else:
                print("‚ö†Ô∏è ƒêƒÉng nh·∫≠p c·∫ßn x√°c minh b·ªï sung")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói x√°c minh ƒëƒÉng nh·∫≠p: {e}")
            return False

    def fill_signup_form(self):
        """ƒêi·ªÅn form ƒëƒÉng k√Ω Hotmail ho√†n ch·ªânh"""
        try:
            print("üìù B·∫Øt ƒë·∫ßu ƒëi·ªÅn form ƒëƒÉng k√Ω...")
            
            # Truy c·∫≠p trang ƒëƒÉng k√Ω
            self.driver.get("https://signup.live.com/")
            self.random_delay(3, 5)
            
            # T·∫°o th√¥ng tin
            username = self.generate_username()
            password = self.generate_password()
            email = f"{username}@outlook.com"
            
            print(f"üë§ Username: {username}")
            print(f"üîë Password: {password}")
            print(f"üìß Email s·∫Ω t·∫°o: {email}")
            
            # B∆∞·ªõc 1: N·∫øu trang ƒë√£ hi·ªán s·∫µn √¥ nh·∫≠p username th√¨ ƒëi·ªÅn lu√¥n, kh√¥ng c·∫ßn click "T·∫°o email m·ªõi"
            self.dismiss_overlays_and_cookies()
            # B·∫£o ƒë·∫£m kh√¥ng ·ªü trong iframe
            try:
                self.driver.switch_to.default_content()
            except Exception:
                pass
            print(f"üåê URL: {self.driver.current_url}")
            try:
                print(f"üìÑ Title: {self.driver.title}")
            except Exception:
                pass

            username_candidates = [
                (By.NAME, "MemberName"),
                (By.ID, "MemberName"),
                (By.CSS_SELECTOR, "input[name='MemberName']"),
                (By.CSS_SELECTOR, "input[type='email']"),
                (By.XPATH, "//input[@name='MemberName' or @id='MemberName']"),
                (By.XPATH, "//input[@type='email' or @type='text'][contains(translate(@aria-label,'EMAIL','email'),'email') or contains(translate(@placeholder,'EMAIL','email'),'email') or contains(@placeholder, 'ƒê·ªãa ch·ªâ')]")
            ]
            # Th·ª≠ focus + highlight ƒë·ªÉ ch·∫Øc ch·∫Øn tr∆∞·ªùng ƒë√∫ng
            try:
                el = self.find_any(username_candidates, timeout=5)
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", el)
                self.driver.execute_script("arguments[0].style.border='2px solid red'", el)
                try:
                    el.click()
                except Exception:
                    pass
            except Exception:
                pass

            filled_username = self.send_keys_any(username_candidates, email, "Email/Username")
            if not filled_username:
                # Kh√¥ng th·∫•y √¥ username ngay -> th·ª≠ click v√†o lu·ªìng t·∫°o email m·ªõi r·ªìi t√¨m l·∫°i
                clicked_new_email = self.click_any([
                    (By.ID, "liveSwitch"),
                    (By.XPATH, "//*[contains(@id,'liveSwitch')]"),
                    (By.XPATH, "//a[contains(., 'Get a new email address')]"),
                    (By.XPATH, "//a[contains(., 'Nh·∫≠n ƒë·ªãa ch·ªâ email m·ªõi') or contains(., 'T·∫°o email m·ªõi')]"),
                    (By.XPATH, "//button[contains(., 'Get a new email address') or contains(., 'T·∫°o email m·ªõi')]")
                ], "T·∫°o email m·ªõi")
                # Th·ª≠ ƒëi·ªÅn l·∫°i sau khi click
                filled_username = self.send_keys_any(username_candidates, email, "Email/Username")
                if not filled_username:
                    # Ch·ª•p l·∫°i m√†n h√¨nh v√† ghi file HTML ƒë·ªÉ debug
                    try:
                        self.driver.save_screenshot("error.png")
                        with open("page.html", "w", encoding="utf-8") as f:
                            f.write(self.driver.page_source)
                        print("üì∏ Saved error.png and page.html for debugging")
                    except Exception:
                        pass
                    raise Exception("Kh√¥ng t√¨m th·∫•y/ƒëi·ªÅn ƒë∆∞·ª£c tr∆∞·ªùng Email (MemberName)")
            
            
            # B∆∞·ªõc 2: Ch·ªçn @outlook.com
            # N·∫øu kh√¥ng th·∫•y n∆°i ch·ªçn domain th√¨ b·ªè qua
            if self.is_present(By.XPATH, "//option[@value='outlook.com']", timeout=2):
                self.wait_and_click(By.XPATH, "//option[@value='outlook.com']", "Ch·ªçn @outlook.com")
            elif self.is_present(By.NAME, "Domain", timeout=2):
                try:
                    domain_select = self.wait.until(EC.presence_of_element_located((By.NAME, "Domain")))
                    Select(domain_select).select_by_value("outlook.com")
                    self.random_delay(0.5, 1)
                except Exception:
                    pass
            else:
                # Kh√¥ng c√≥ b∆∞·ªõc ch·ªçn domain tr√™n giao di·ªán hi·ªán t·∫°i ‚ûú ti·∫øp t·ª•c
                pass
            
            # B∆∞·ªõc 3: ƒêi·ªÅn email/username (ƒëi·ªÅn full email ƒë·ªÉ t∆∞∆°ng th√≠ch m·ªçi UI)
            self.wait_and_send_keys(By.NAME, "MemberName", email, "Email/Username")
            
            # B∆∞·ªõc 4: Click Next (ƒëa chi·∫øn l∆∞·ª£c)
            next_candidates = [
                (By.ID, "iSignupAction"),
                (By.CSS_SELECTOR, "#iSignupAction"),
                (By.XPATH, "//input[@type='submit' and (contains(@value,'Next') or contains(@value,'Ti·∫øp'))]"),
                (By.XPATH, "//button[contains(., 'Next') or contains(., 'Ti·∫øp')]")
            ]

            if not self.click_any(next_candidates, "Next"):
                # Th·ª≠ Enter tr√™n √¥ email
                if not self.press_enter_on(username_candidates, "Enter Next"):
                    # Th·ª≠ submit form cha
                    if not self.submit_parent_form(username_candidates):
                        try:
                            self.driver.save_screenshot("error_next.png")
                            print("üì∏ Saved error_next.png for Next failure")
                        except Exception:
                            pass
                        raise Exception("Kh√¥ng click/submit ƒë∆∞·ª£c n√∫t Next sau b∆∞·ªõc Email")
            # ƒê·ª£i m√†n Password xu·∫•t hi·ªán tr∆∞·ªõc khi ƒëi ti·∫øp
            if not self.wait_for_any([(By.ID, "PasswordInput"), (By.NAME, "passwd"), (By.CSS_SELECTOR, "input[type='password']")], timeout=10):
                # Th·ª≠ click Next th√™m m·ªôt l·∫ßn n·∫øu ch∆∞a chuy·ªÉn trang
                self.click_any(next_candidates, "Next retry")
                if not self.wait_for_any([(By.ID, "PasswordInput"), (By.NAME, "passwd"), (By.CSS_SELECTOR, "input[type='password']")], timeout=8):
                    raise Exception("Kh√¥ng chuy·ªÉn sang m√†n h√¨nh nh·∫≠p m·∫≠t kh·∫©u sau khi b·∫•m Next")
            self.random_delay(2, 3)
            
            # B∆∞·ªõc 5-6: ƒêi·ªÅn password nhanh v√† chuy·ªÉn ti·∫øp
            self.fill_password_fast_and_next(password)
            self.random_delay(1, 2)
            
            # B∆∞·ªõc 7/8: UI c√≥ th·ªÉ nh·∫£y th·∫≥ng sang Country/Birth sau Password
            # Th·ª≠ ƒëi·ªÅn t√™n n·∫øu c√≥, n·∫øu kh√¥ng c√≥ th√¨ b·ªè qua v√† ƒëi Country/Birth
            first_name = "John"
            last_name = "Smith"

            if self.is_present(By.NAME, "FirstName", timeout=2):
                self.wait_and_send_keys(By.NAME, "FirstName", first_name, "First name")
                self.wait_and_send_keys(By.NAME, "LastName", last_name, "Last name")
                # Next ƒë·ªÉ t·ªõi Country/Birth
                self.wait_and_click(By.ID, "iSignupAction", "Next sang Country/Birth")
                self.random_delay(1, 2)

            # ƒêi·ªÅn th√¥ng tin b·ªï sung nhanh
            self.select_country_and_birthdate()
            
            # Click Next ƒë·ªÉ ƒë·∫øn CAPTCHA
            self.wait_and_click(By.ID, "iSignupAction", "Next ƒë·∫øn CAPTCHA")
            self.random_delay(3, 5)
            
            print("‚úÖ ƒê√£ ƒëi·ªÅn xong form, s·∫µn s√†ng cho CAPTCHA!")
            return email, password
            
        except Exception as e:
            print(f"‚ùå L·ªói ƒëi·ªÅn form: {e}")
            # Ch·ª•p ·∫£nh m√†n h√¨nh ƒë·ªÉ debug
            try:
                self.driver.save_screenshot("error.png")
                print("üì∏ ƒê√£ l∆∞u ·∫£nh l·ªói: error.png")
            except:
                pass
            return None, None

    def save_account(self, email, password, status="success"):
        """L∆∞u th√¥ng tin t√†i kho·∫£n v√†o file"""
        try:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with open("hotmail_accounts.txt", "a", encoding="utf-8") as f:
                f.write(f"Email: {email}\n")
                f.write(f"Password: {password}\n")
                f.write(f"Status: {status}\n")
                f.write(f"Created: {timestamp}\n")
                f.write("-" * 50 + "\n")
            print(f"‚úÖ ƒê√£ l∆∞u t√†i kho·∫£n v√†o hotmail_accounts.txt")
            
            # In ra console ƒë·ªÉ d·ªÖ copy
            print("\n" + "üéØ" * 20)
            print("TH√îNG TIN T√ÄI KHO·∫¢N:")
            print(f"üìß Email: {email}")
            print(f"üîë Password: {password}")
            print(f"üìä Status: {status}")
            print("üéØ" * 20)
            
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u file: {e}")

    def create_account(self):
        """T·∫°o m·ªôt t√†i kho·∫£n Hotmail ho√†n ch·ªânh"""
        try:
            # Kh·ªüi ƒë·ªông tr√¨nh duy·ªát
            if not self.setup_driver():
                return False
            
            # ƒêi·ªÅn form ƒëƒÉng k√Ω
            email, password = self.fill_signup_form()
            
            if not email:
                print("‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn form ƒëƒÉng k√Ω")
                return False
            
            # Ch·ªù gi·∫£i CAPTCHA th·ªß c√¥ng
            self.solve_captcha_manually()
            
            # Ho√†n th√†nh ƒëƒÉng k√Ω
            if self.complete_verification():
                # X√°c minh ƒëƒÉng nh·∫≠p
                login_success = self.verify_and_login(email, password)
                
                if login_success:
                    self.save_account(email, password, "SUCCESS")
                    print(f"\nüéâ T·∫†O T√ÄI KHO·∫¢N TH√ÄNH C√îNG: {email}")
                    return True
                else:
                    self.save_account(email, password, "NEEDS_MANUAL_LOGIN")
                    print(f"\n‚ö†Ô∏è T√†i kho·∫£n ƒë∆∞·ª£c t·∫°o nh∆∞ng c·∫ßn ƒëƒÉng nh·∫≠p th·ªß c√¥ng: {email}")
                    return True
            else:
                self.save_account(email, password, "FAILED")
                print(f"\n‚ùå T·∫°o t√†i kho·∫£n th·∫•t b·∫°i: {email}")
                return False
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o t√†i kho·∫£n: {e}")
            return False
        finally:
            if self.driver:
                print("\nüîÑ Tr√¨nh duy·ªát s·∫Ω ƒë√≥ng sau 10 gi√¢y...")
                time.sleep(10)
                self.driver.quit()
                print("‚úÖ ƒê√£ ƒë√≥ng tr√¨nh duy·ªát!")

    def auto_select_combobox_click_option(self, label, option_value=None):
        """
        Click v√†o combobox d·ª±a tr√™n label, ch·ªù cho dropdown m·ªü ra (aria-expanded=true)
        v√† container b√™n c·∫°nh (v√≠ d·ª•: <div role="listbox">) hi·ªÉn th·ªã, sau ƒë√≥ l·∫•y c√°c option b√™n trong
        container ƒë√≥ ƒë·ªÉ ch·ªçn (theo option_value n·∫øu c√≥, n·∫øu kh√¥ng ch·ªçn ng·∫´u nhi√™n).
        Cu·ªëi c√πng ƒë·ª£i dropdown ƒë√≥ng l·∫°i (aria-expanded=false).
        """
        try:
            # T√¨m √¥ combobox theo aria-label ch·ª©a label (chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng)
            combo = self.wait.until(EC.element_to_be_clickable(
                (By.XPATH, f"//*[@role='combobox' and contains(translate(@aria-label, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'), '{label.lower()}')]")
            ))
            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", combo)
            combo.click()
            # Ch·ªù thu·ªôc t√≠nh aria-expanded chuy·ªÉn th√†nh "true"
            self.wait.until(lambda d: combo.get_attribute("aria-expanded") == "true")
            self.random_delay(0.5, 1)
            # Ch·ªù container dropdown (role="listbox") hi·ªÉn th·ªã b√™n c·∫°nh
            listbox = WebDriverWait(self.driver, 5).until(
                EC.visibility_of_element_located((By.XPATH, "//div[@role='listbox']"))
            )
            # L·∫•y danh s√°ch option b√™n trong container
            options = listbox.find_elements(By.XPATH, ".//*[@role='option']")
            print(f"[DEBUG] S·ªë l∆∞·ª£ng option t√¨m ƒë∆∞·ª£c cho '{label}': {len(options)}")
            if not options:
                print(f"[ERROR] Kh√¥ng t√¨m th·∫•y option trong container dropdown c·ªßa combobox {label}")
                return False

            # L·ª±a ch·ªçn option: n·∫øu c√≥ option_value th√¨ t√¨m b·∫±ng text, n·∫øu kh√¥ng ch·ªçn ng·∫´u nhi√™n
            selected_option = None
            if option_value:
                for opt in options:
                    if opt.text.strip() == option_value:
                        selected_option = opt
                        break
            else:
                selected_option = random.choice(options)

            if not selected_option:
                print(f"[ERROR] Kh√¥ng t√¨m th·∫•y option {option_value} trong combobox {label}")
                return False

            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", selected_option)
            try:
                selected_option.click()
            except Exception:
                self.driver.execute_script("arguments[0].click();", selected_option)
            self.random_delay(0.5, 1)
            # ƒê·ª£i cho ƒë·∫øn khi dropdown ƒë√≥ng l·∫°i
            self.wait.until(lambda d: combo.get_attribute("aria-expanded") == "false")
            return True
        except Exception as e:
            print(f"[ERROR] L·ªói ch·ªçn combobox {label}: {e}")
            return False
def main():
    print("üî• HOTMAIL AUTO CREATOR - FAST VERSION")
    print("=" * 60)
    print("Phi√™n b·∫£n ƒë√£ s·ª≠a l·ªói - T·ª± ƒë·ªông ho√†n to√†n sau CAPTCHA")
    print("=" * 60)
    
    creator = HotmailAutoCreator(fast=True)
    
    # T·∫°o 1 t√†i kho·∫£n
    success = creator.create_account()
    
    if success:
        print("\n‚úÖ HO√ÄN TH√ÄNH! Ki·ªÉm tra file hotmail_accounts.txt")
    else:
        print("\n‚ùå TH·∫§T B·∫†I! Vui l√≤ng th·ª≠ l·∫°i")
    
    input("\n‚è∏Ô∏è Nh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    main()